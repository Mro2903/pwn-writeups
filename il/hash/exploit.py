#!/usr/bin/env python3
# -*- coding: utf-8 -*-
# This exploit template was generated via:
# $ pwn template hash
from pwn import *
import hashlib

def find_collision(md5_hash):
    collide_with = md5_hash[:3]  # We only need to match the first three bytes
    counter = 30244248
    while True:
        # Create a test string
        test_string = f"collision_{counter}".encode()
        # Calculate its MD5 hash
        md5_result = hashlib.md5(test_string).digest()
        
        # Check if the first three bytes match the target hash
        if md5_result[:3] == collide_with:
            return test_string
        
        counter += 1

# Set up pwntools for the correct architecture
exe = context.binary = ELF(args.EXE or 'hash')

# Many built-in settings can be controlled on the command-line and show up
# in "args".  For example, to dump all data sent/received, and disable ASLR
# for all created processes...
# ./exploit.py DEBUG NOASLR



def start(argv=[], *a, **kw):
    '''Start the exploit against the target.'''
    if args.GDB:
        return gdb.debug([exe.path] + argv, gdbscript=gdbscript, *a, **kw)
    elif args.REMOTE:
        return remote('pwnable.co.il', 9006, *a, **kw)
    else:
        return process([exe.path] + argv, *a, **kw)

# Specify your GDB script here for debugging
# GDB will be launched if the exploit is run via e.g.
# ./exploit.py GDB
gdbscript = '''
tbreak main
continue
'''.format(**locals())

#===========================================================
#                    EXPLOIT GOES HERE
#===========================================================
# Arch:     amd64-64-little
# RELRO:      Partial RELRO
# Stack:      No canary found
# NX:         NX enabled
# PIE:        PIE enabled
# Stripped:   No

io = start()

io.recvline()
flag_hash = unhex(io.recvline().strip())
collision_string = find_collision(flag_hash)
io.send(collision_string)

print(io.recvall(timeout=1).decode())